plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'distribution'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'com.marklogic'

description = "The official MarkLogic Java client API."

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    if (JavaVersion.current().isJava9Compatible()) {
        compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
        compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.2'
        compile group: 'org.glassfish.jaxb', name: 'jaxb-core', version: '2.3.0.1'
    }
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    compileOnly group: 'org.apache.spark', name:'spark-sql_2.11',version: '2.4.5'
    compileOnly group:'org.apache.spark', name:'spark-launcher_2.11',version: '2.4.5'
    compileOnly group:'org.apache.spark', name:'spark-catalyst_2.11',version: '2.4.5'
    compileOnly group:'org.apache.spark', name:'spark-streaming_2.11',version: '2.4.5'
    compileOnly group:'org.apache.spark', name:'spark-core_2.11',version: '2.4.5'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version:'3.10.0'
    compile group: 'com.squareup.okhttp3', name: 'logging-interceptor', version:'3.10.0'
    compile group: 'com.squareup.okio', name: 'okio', version:'1.15.0'
    compile group: 'com.burgstaller', name: 'okhttp-digest', version:'1.16'
    compile group: 'com.sun.mail', name: 'javax.mail', version:'1.6.1'
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version:'2.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.25'

    extraLibs group: 'com.squareup.okhttp3', name: 'okhttp', version:'3.10.0'
    extraLibs group: 'com.squareup.okhttp3', name: 'logging-interceptor', version:'3.10.0'
    extraLibs group: 'com.squareup.okio', name: 'okio', version:'1.15.0'
    extraLibs group: 'com.burgstaller', name: 'okhttp-digest', version:'1.16'
    extraLibs group: 'com.sun.mail', name: 'javax.mail', version:'1.6.1'
    extraLibs group: 'javax.ws.rs', name: 'javax.ws.rs-api', version:'2.1'
    extraLibs group: 'org.slf4j', name: 'slf4j-api', version:'1.7.25'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.10.19'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version:'1.2.3'
    testCompile group: 'org.hsqldb', name: 'hsqldb', version:'2.4.0'
    compileOnly group: 'org.jdom', name: 'jdom2', version:'2.0.6'
    compileOnly group: 'dom4j', name: 'dom4j', version:'1.6.1'
    compileOnly group: 'com.google.code.gson', name: 'gson', version:'2.8.2'
    compileOnly group: 'net.sourceforge.htmlcleaner', name: 'htmlcleaner', version:'2.21'
    compileOnly group: 'com.opencsv', name: 'opencsv', version: '4.1'
    compileOnly group: 'org.geonames', name: 'geonames', version:'1.0'
    compileOnly group: 'org.springframework', name: 'spring-jdbc', version: '5.0.4.RELEASE'
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'2.9.1'
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version:'2.9.1'
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.9.1'
    compileOnly group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version:'2.9.1'
    compileOnly group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version:'2.9.1'

    configurations.compile.extendsFrom(configurations.extraLibs)
}

jar {
    exclude (
            'search.xsd', 'search-bindings.xjb', 'query-options-template.xml',
            'com/marklogic/client/example/**', 'Example.properties',
            'example/**', 'scripts/**', '*.txt', 'property.xsd',
            'restapi-bindings.xjb', 'security.xsd'
    )
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

shadowJar {
    baseName = 'java-client-api-shadow'
    classifier = ''
    exclude (
            'search.xsd', 'search-bindings.xjb', 'query-options-template.xml',
            'com/marklogic/client/example/**', 'Example.properties',
            'example/**', 'scripts/**', '*.txt', 'property.xsd',
            'restapi-bindings.xjb', 'security.xsd'
    )
    relocate( 'okio',            'marklogic.okio' )

}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    exclude ('Example.properties', 'example/**', 'scripts/**',
            'property', '*.xsd', '*.xjb')
    from sourceSets.main.allSource
}

javadoc {
    maxMemory="6000m"
    options.overview = "src/main/javadoc/overview.html"
    options.windowTitle = "$rootProject.describedName $rootProject.version"
    options.docTitle = "$rootProject.describedName $rootProject.version"
    options.bottom = "Copyright &copy; 2013-2019 MarkLogic Corporation."
    options.links = [ 'http://docs.oracle.com/javase/8/docs/api/' ]
    options.use = true
    options.addBooleanOption('html4', true)
    exclude([
            '**/impl/**', '**/jaxb/**', '**/test/**'
    ])
// workaround for bug in options.docFilesSubDirs = true
    doLast{
        copy{
            from "${projectDir}/src/main/javadoc/doc-files"
            into "${buildDir}/docs/javadoc/doc-files"
        }
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

Node pomCustomizations = new NodeBuilder(). project {
    name '$rootProject.describedName'
    packaging 'jar'
    textdescription '$project.description'
    url 'https://github.com/marklogic/java-client-api'

    scm {
        url 'git@github.com:marklogic/java-client-api.git'
        connection 'scm:git:git@github.com:marklogic/java-client-api.git'
        developerConnection 'scm:git:git@github.com:marklogic/java-client-api.git'
    }

    licenses {
        license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            name 'MarkLogic'
            email 'java-sig@marklogic.com'
            organization 'MarkLogic'
            organizationUrl 'https://www.marklogic.com'
        }
        developer {
            name 'MarkLogic Github Contributors'
            email 'general@developer.marklogic.com'
            organization 'Github Contributors'
            organizationUrl 'https://github.com/marklogic/java-client-api/graphs/contributors'
        }
    }
}

publishing {
    publications {
        mainJava(MavenPublication) {
            from components.java

            pom.withXml {
                asNode().append(pomCustomizations.packaging)
                asNode().append(pomCustomizations.name)
                asNode().appendNode("description", pomCustomizations.textdescription.text())
                asNode().append(pomCustomizations.url)
                asNode().append(pomCustomizations.licenses)
                asNode().append(pomCustomizations.developers)
                asNode().append(pomCustomizations.scm)
            }
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            if(project.hasProperty("mavenUser")) {
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
            url publishUrl
        }
    }
}

distZip {
    archiveName= "$project.name-$rootProject.version-with-dependencies.zip"
    dependsOn javadoc
}

distributions {
    main {
        contents {
            from("..") {
                include("LEGALNOTICES.TXT")
            }
            from("src/main/resources") {
                include ("Readme.txt")
                include ("LICENSE.txt")
            }
            into ("example") {
                from ("src/main/resources") {
                    include ("data/**")
                    include ("scripts/**")
                    include ("Example.properties")
                }
                from ("src/main/resources/example") {
                    include ("README.txt")
                }
                from ("src/main/java/") {
                    include ("com/marklogic/client/example/cookbook/*.java")
                    include ("com/marklogic/client/example/handle/*.java")
                    include ("com/marklogic/client/example/extension/*.java")
                }
            }
            into ("doc/api") {
                from ("build/docs/javadoc")
            }
            into("lib") {
                from jar
                from(project.configurations.runtime)
            }
        }
    }
}

task printClassPath() {
    doLast {
        println sourceSets.main.runtimeClasspath.asPath+':'+sourceSets.test.runtimeClasspath.asPath
    }
}

task testServerInit(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.client.test.util.TestServerBootstrapper'
}

task testServerTeardown(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.client.test.util.TestServerBootstrapper'
    args = ["teardown"]
}

task testSparkReader(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.marklogic.client.spark.MarkLogicSparkReadDriver'
}

task testSparkWriter(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.marklogic.client.spark.MarkLogicSparkWriteDriver'
}

